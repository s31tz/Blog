# Date: 2017-11-20
# Id: 151
# Draft: no
# Categories: Docker

%Document:
  title="Docker unter Debian (buster) installieren"
  generateAnchors=0
  utf8=1

%Figure: file="IMGDIR/docker-682x163.png" width="218" height="52"
  url="http://docker.com/"

Wer U{"http://docker.com/",text="Docker"} unter Debian installieren
möchte, findet das Paket (docker-ce) nicht im Debian Repository,
sondern muss es von einem Docker-Server installieren. Die
entsprechende Installationsanleitung findet sich
U{"https://docs.docker.com/engine/installation/linux/docker-ce/debian/",\
text="hier"}. Es gibt allerdings nur Pakete für die vergangenen
Stable-Releases von Debian (Stretch, Jessie, Wheezy), nicht für das
aktuelle Testing-Release (Buster). Das macht aber nichts, das Paket
für das letzte Stable-Release (Stretch) funktioniert auch unter
Buster.

Installation:

  # apt-get install apt-transport-https ca-certificates curl gnupg2 \
      software-properties-common
  # curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
  # apt-key fingerprint 0EBFCD88
  # vi /etc/apt/sources.list # die folgende Zeile hinzufügen
  deb [arch=amd64] https://download.docker.com/linux/debian stretch stable
  # apt-get update
  # apt-get install docker-ce

Test:

  # docker run hello-world

Verzeichnisbaum mit den Docker-Bewegungsdaten:

  /var/lib/docker

Füge user USER zur Gruppe docker hinzu, damit dieser neben root
ebenfalls mit Docker arbeiten kann:

  # usermod -G docker USER

Container starten:

  $ docker run IMAGE

Container stoppen:

  $ docker stop CONTAINER

Liste der aktuell ausgeführten Container:

  $ docker ps

Liste aller Container, einschließlich der beendeten:

  $ docker ps -a

Lösche einen oder mehrere Container:

  $ docker rm CONTAINER ...

Kommando im Container ausführen:

  $ docker exec CONTAINER COMMAND ARG ...

Z.B.

  $ docker run debian -d sleep 120 # -d = detach
  06f0ee0e2256c5d531f8134f1bbb8f91b7189483c4ab21c4fb7807384420b1bf
  $ docker exec 06f0ee0e2256 cat /etc/hosts
  127.0.0.1	localhost
  ::1	localhost ip6-localhost ip6-loopback
  fe00::0	ip6-localnet
  ff00::0	ip6-mcastprefix
  ff02::1	ip6-allnodes
  ff02::2	ip6-allrouters
  172.17.0.2	06f0ee0e2256

Stdin und stdout mit dem Container verbinden:

  $ docker run -it IMAGE # -i = stdin, -t = stdout

Einen internen Port auf einen externen Port abbilden:

  $ docker run -p PORT_EXTERN:PORT_INTERN IMAGE

  PORT_INTERN: Port innerhalb des Containers
  PORT_EXTERN: Port auf dem Docker-Host

Ein internes Verzeichnis auf ein externes Verzeichnis abbilden:

  $ docker run -v DIR_EXTERN:DIR_INTERN IMAGE

  DIR_EXTERN: Verzeichnis auf dem Docker-Host
  DIR_INTERN: Verzeichnis innerhalb des Containers

Environement-Variablen setzen:

  $docker run -e NAME=VALUE IMAGE

(die definierten Enviroment-Variablen: C{docker inspect IMAGE})

Logs auf stdout ausgeben:

  $ docker logs CONTAINER

Image herunterladen:

  $ docker pull IMAGE

Liste der lokal vorrätigen Images:

  $ docker image ls

Lösche ein oder mehrere Images:

  $ docker rmi IMAGE ...

Image-Konfiguration ansehen:

  $ docker inspect IMAGE

Image in TAR speichern:

  $ docker image save IMAGE >FILE.tar

Image in Dateisystem entpacken (mit dem Zusatzprogramm
U{"http://blog.oddbit.com/2015/02/13/\ unpacking-docker-images/",\
text="undocker"}):

  $ docker image save IMAGE | undocker -o DIR

Image im globalen Repository (Docker Hub) suchen:

  $ docker search TERM

Eigenes Image erstellen:

  $ mkdir my-app
  $ cd my-app
  $ vi Dockerfile
  ...
  $ docker build -t my-app .

Beispiel:

  FROM debian

  RUN apt-get update
  RUN apt-get -y install python3
  RUN apt-get -y install python3-pip

  RUN pip3 install flask
  RUN pip3 install flask-mysql

  COPY . /opt/www

  ENTRYPOINT FLASK_APP=/opt/www/app.py flask run --host=0.0.0.0

Image erzeugen:

  docker build . -t ACCOUNT/NAME

Lokales Netz (Class B) erzeugen:

  $ docker network create NAME

Liste der Netze:

  $ docker network ls

Lösche ein oder mehrere Netze:

  $ docker network rm

Globales Repository von Docker-Images (Account ist kostenlos):

* U{"https://hub.docker.com/"}

Doku zu den offiziellen Docker-Images: 

* U{"https://github.com/docker-library/docs/"}

= Links

* U{"http://docker.com/",text="Docker Homepage"}
* U{"https://docs.docker.com/engine/installation/linux/docker-ce/debian/",\
    text="Get Docker CE for Debian"}
* U{Labs - Docker For The Absolute Beginner}

%Link:
  name="Labs - Docker For The Absolute Beginner"
  url=https://kodekloud/p/docker-labs

# eof
