# Date: 2021-03-21
# Id: 164
# Categories: Datenbanken, MS SQL Server

%Document:
  title="MS SQL Server: DB-übergreifender Zugriff auf Tabelle nur über View"
  generateAnchors=0
  utf8=1

%Figure: file="IMGDIR/microsoft-sql-server-719x182.png" width="198" height="50"
  url=""

B{Ausgangslage:}

* In einer Datenbank C{mydb1} befindet sich eine Tabelle C{myschema1.mytable}
* In einer zweiten Datenbank C{mydb2} befindet sich eine View
  C{myschema2.myview}
* View C{myschema2.myview} selektiert Tabelle C{myschema1.mytable}

B{Anforderung:}

Es soll ein Server-Zugang C{mylogin} geschaffen werden, der Daten über View
C{myschema2.myview} selektieren darf, aber nicht direkt aus Tabelle
C{myschema1.mytable}.

B{Lösung:}

1. Login C{mylogin} erzeugen mit dem User-Mapping: C{mydb1} -> C{myuser1}
   und C{mydb2} -> C{myuser2}.

2. User C{myuser1} erhält keine speziellen Rechte.

3. User C{myuser2} erhält Leserecht auf View C{myschema2.myview}.

4. Den Schemata C{myschema1} und C{myschema2} den gleichen Owner geben
   (und damit den enthaltenen Objekten C{mytable} und C{myview}).

5. Für die Datenbanken C{mydb1} und C{mydb2} Q{cross-database ownership
   chaining} aktivieren.

B{SQL:}

%Code: highlight=SQL
  CREATE LOGIN mylogin WITH PASSWORD = 'mypassword';

  CREATE DATABASE mydb1;
  ALTER DATABASE mydb1 SET DB_CHAINING ON;

  CREATE DATABASE mydb2;
  ALTER DATABASE mydb2 SET DB_CHAINING ON;

  USE mydb1;

  CREATE SCHEMA myschema1;

  CREATE TABLE myschema1.mytable (id INT PRIMARY KEY);
  CREATE USER myuser1 FOR LOGIN mylogin;

  USE mydb2;

  CREATE SCHEMA myschema2;
  CREATE USER myuser2 FOR LOGIN mylogin;

  CREATE VIEW myschema2.myview AS SELECT * FROM mydb1.myschema1.mytable;
  GRANT SELECT ON myschema2.myview TO myuser2;
.

Über C{mylogin} ausgeführt:

%Code: highlight=SQL
  -- erfolgreich
  SELECT * FROM mydb2.myschema2.myview;

  -- schlägt fehl: The SELECT permission was denied on the object 'mytable',
  -- database 'mydb1', schema 'myschema1'
  SELECT * FROM mydb1.myschema1.mytable;
.
