# Date: 2016-02-25
# Id: 137
# Draft: no
# Categories: Datenbanken, MySQL

%Document:
  title="MySQL: Join mit mehrwertiger Fremdschlüsselkolumne \
    durch find_in_set()"
  generateAnchors=0
  utf8=1

%Figure: file="IMGDIR/mysql-logo-170x115.png" \
  width="74" height="50" url="http://www.mysql.de/"

Der reinen Datenbank-Lehre nach ist es strikt verboten mehrere Werte
in einer Kolumne zu speichern. Sowas kommt in der Realität trotzdem
vor, sogar bei Fremdschlüssel-Kolumnen. D.h. die
Fremdschlüssel-Kolumne referenziert in dem Fall nicht nur eine,
sondern I{mehrere} Zeilen. Die gute Nachricht ist, dass MySQL es
erlaubt, für so ein - ansich unterlaubtes - Design mithilfe der
Funktion C{find_in_set()} eine Join-Condition zu formulieren.

= Beispiel
    
Gegeben zwei Tabellen C{TableA} und C{TableB}, wobei Kolumne
C{TableB.TableA_Id} auf I{mehrere} Zeilen in C{TableA} verweist.

  TableA    TableB

  Id        Id TableA_Id
  --        -- ---------
  1         1  2,3
  2         2  3
  3         3  1,2,3,4
  4         4  NULL
    
Wäre C{TableB.TableA_Id} eine normale Fremdschlüssel-Kolumne mit
I{einem} Wert sähe die Join-Codition so aus:

  a.id = b.tablea_id

Diese Bedingung ist hier nicht anwendbar, da eine Identität (C{=})
zwischen C{TableA.Id} und C{TableB.TableA_Id} nur manchmal gegeben ist.

Die Selektion
        
  SELECT
      b.id b_id
      , a.id a_id
  FROM
      TableA a
      INNER JOIN TableB b
      ON a.id = b.tablea_id
  ORDER BY
      b.id
      , a.id
    
liefert das I{falsche} Resultat
    
  +------+------+
  | b_id | a_id |
  +------+------+
  |    1 |    2 | zweifelhaft
  |    2 |    3 | erwartet
  |    3 |    1 | zweifelhaft
  +------+------+

Da MySQL bei numerischen Identitäts-Vergleichen eine laxe Auffassung
hat und den numerischen Anfang zum Vergleich heranzieht, auch wenn der
Wert insgesamt keine Zahl darstellt, ist die Ergebnismenge
zusätzlich zweifelhaft.
    
MySQL besitzt jedoch eine Funktion C{find_in_set()}, mit deren Hilfe
eine Join-Condition formuliert werden kann, die die mehrwertigen
Verweise korrekt auflöst:

  FIND_IN_SET(a.id, b.tablea_id) > 0

Die Selektion
    
  SELECT
      b.id b_id
      , a.id a_id
  FROM
      TableA a
      INNER JOIN TableB b
      ON FIND_IN_SET(a.id, b.tablea_id) > 0
  ORDER BY
      b.id
      , a.id
 
liefert das richtige Resultat

  +------+------+
  | b_id | a_id |
  +------+------+
  |    1 |    2 |
  |    1 |    3 |
  |    2 |    3 |
  |    3 |    1 |
  |    3 |    2 |
  |    3 |    3 |
  |    3 |    4 |
  +------+------+
    
= Links

* U{"http://dev.mysql.com/doc/refman/5.7/en/string-functions.html\
  #function_find-in-set",text="MySQL: find_in_set()"}
       
# eof
