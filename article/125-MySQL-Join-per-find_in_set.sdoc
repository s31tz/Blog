# Date: 2016-02-25
# Id: 137
# Draft: no
# Categories: Datenbanken, MySQL

%Document:
  title="MySQL: Join mit mehrwertiger Fremdschlüsselkolumne durch find_in_set()"
  generateAnchors=0
  utf8=1

%Figure: file="IMGDIR/mysql-logo-170x115.png" \
  width="74" height="50" url="http://www.mysql.de/"

Der reinen Datenbank-Lehre nach ist es strikt verboten mehrere Werte
auf einem Attribut zu speichern. Sowas kommt in der Realität trotzdem
vor, sogar bei Fremdschlüssel-Attributen. D.h. das
Fremdschlüssel-Attribut referenziert in dem Fall nicht nur eine,
sondern I{mehrere} Zeilen. Die gute Nachricht ist, dass MySQL es
erlaubt, für so ein - ansich unterlaubtes - Design mithilfe der
Funktion C{find_in_set()} eine Join-Condition zu formulieren.

= Beispiel
    
Gegeben zwei Tabellen C{TableA} und C{TableB}, wobei Attribut
C{TableB.tablea_id} auf I{mehrere} Zeilen in C{TableA} verweist.

  TableA    TableB

  id        id tablea_id
  --        -- ---------
  1         1  2,3
  2         2  3
  3         3  1,2,3,4
  4         4  NULL
    
Wäre C{TableB.tablea_id} ein normales Fremdschlüssel-Attribut mit
I{einem} Wert sähe die Join-Condition so aus:

  TableA.id = TableB.tablea_id

Diese Bedingung ist hier nicht anwendbar, da eine Identität (C{=})
zwischen C{TableA.id} und C{TableB.tablea_id} nur manchmal gegeben ist.

Die Selektion

  SELECT
      b.id b_id
      , a.id a_id
  FROM
      TableA a
      INNER JOIN TableB b
      ON a.id = b.tablea_id
  ORDER BY
      b.id
      , a.id
  
liefert ein I{falsches} Resultat
    
  %Code: class="code-pre-no-border"
  +------+------+
  | b_id | a_id |
  +------+------+
  |    1 |    2 | zweifelhaft
  |    2 |    3 | erwartet
  |    3 |    1 | zweifelhaft
  +------+------+
  .

Da MySQL bei numerischen Identitäts-Vergleichen eine laxe Auffassung
hat und gegen den numerischen Anfang einer Zeichenkette vergleicht,
auch wenn die Zeichenkette insgesamt keine Zahl darstellt, ist die
Ergebnismenge zusätzlich zweifelhaft. Statt der erwarten einen
Zeile werden drei Zeilen geliefert.
    
MySQL besitzt jedoch eine Funktion C{find_in_set()}, mit deren Hilfe
eine Join-Condition formuliert werden kann, die die mehrwertigen
Verweise korrekt auflöst:

  FIND_IN_SET(TableA.id, TableB.tablea_id) > 0

Die Selektion

  SELECT
      b.id b_id
      , a.id a_id
  FROM
      TableA a
      INNER JOIN TableB b
      ON FIND_IN_SET(a.id, b.tablea_id) > 0
  ORDER BY
      b.id
      , a.id
 
liefert das korrekte Resultat

  %Code: class="code-pre-no-border"
  +------+------+
  | b_id | a_id |
  +------+------+
  |    1 |    2 |
  |    1 |    3 |
  |    2 |    3 |
  |    3 |    1 |
  |    3 |    2 |
  |    3 |    3 |
  |    3 |    4 |
  +------+------+
  .
        
= Links

* U{"http://dev.mysql.com/doc/refman/5.7/en/string-functions.html\
  #function_find-in-set",text="MySQL: find_in_set()"}
       
# eof
