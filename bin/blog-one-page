#!/usr/bin/env perl

# Generated by CoTeDo - DO NOT EDIT!

use strict;
use warnings;

use FindBin qw/$Bin/;
use lib "$Bin/../lib/perl5";
use open OUT=>':locale';
use POSIX ();
use Blog::Base::Prty::Option;
use Blog::Base::R1::Help;
use Blog::Base::Prty::ApplicationPaths;
use Blog::Base::Prty::Config;
use Blog::Base::Prty::Process;
use Blog::Base::Prty::Path;
use Blog::Base::R1::Sdoc;

# -----------------------------------------------------------------------------

=head1 NAME

blog-one-page - Erzeuge eine HTML-Seite mit allen Artikeln

=head1 USAGE

blog-one-page [OPTIONS]

=head1 OPTIONS

=over 4

=item --embed=BOOL (Default: 1)

Bette Stylesheets und Bilder in HTML-Code ein.

=item --format=FORMAT (Default: 'html')

Format der generierten Datei: 'html' oder 'sdoc'.

=item --help

Diese Hilfe.

=back

=head1 IMPORT

=over 2

=item *

FindBin

=item *

lib

=item *

open

=item *

POSIX

=item *

L<Blog::Base::Prty::Option>

=item *

L<Blog::Base::R1::Help>

=item *

L<Blog::Base::Prty::ApplicationPaths>

=item *

L<Blog::Base::Prty::Config>

=item *

L<Blog::Base::Prty::Process>

=item *

L<Blog::Base::Prty::Path>

=item *

L<Blog::Base::R1::Sdoc>

=back

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2015 Frank Seitz

=cut

# -----------------------------------------------------------------------------

# Optionen

my $embed = 1;
my $format = 'html';
my $verbose = 0;
my $help = 0;

Blog::Base::Prty::Option->extract(\@ARGV,
    -embed=>\$embed,
    -format=>\$format,
    -verbose=>\$verbose,
    -help=>\$help,
);
if ($help) {
    Blog::Base::R1::Help->exit;
}
elsif (@ARGV) {
    Blog::Base::R1::Help->exit(10,'ERROR: Too many arguments');
}

# Konfiguration

my $app = Blog::Base::Prty::ApplicationPaths->new;
my $cfg = Blog::Base::Prty::Config->new($app->etcDir('blog.conf'));

my $articleDir = $app->homeDir('article');
my $imageDir = $app->homeDir('image');
my $cssDir = $app->homeDir('css');

# Ins Artikelverzeichnis wechseln
Blog::Base::Prty::Process->cwd($articleDir);

# Artikeldateien zusammenfügen

my $sdoc = '';
my $maxMtime = 0;
for my $file (reverse Blog::Base::Prty::Path->glob("*.sdoc")) {
    my ($num) = $file =~ m|(\d+)-[^/]+.sdoc|;
    $num += 0;
    my $text = Blog::Base::Prty::Path->read($file);

    # Drafts übergehen wir

    if ($text =~ /^# (?:Draft: )(.+)/m) {
        if ($1 eq 'yes') {
            next;
        }
    }

    # Zeitpunkt der jüngsten Änderung

    my $mtime = Blog::Base::Prty::Path->mtime($file);
    if ($mtime > $maxMtime) {
        $maxMtime = $mtime;
    }

    # Titel des Artikels bestimmen

    my ($title) = $text =~ /title="(.*?)"/;
    $title = sprintf "%03d. $title",$num;

    # Text manipulieren

    $text =~ s/.*^%Document:.*?\n\n//sm; # Anfang wegschneiden
    $text =~ s/^(=+)/=$1/mg;         # Abschnitte eine Ebene tiefer
    $text =~ s/IMGDIR/$imageDir/g;   # Bildverzeichnis eintragen
    $text =~ s/^# eof\n//m;          # # eof entfernen
    $text =~ s/\s+$//;               # Whitespace am Ende entfernen

    if ($sdoc) {
        $sdoc .= "\n\n";
    }
    $sdoc .= "= $title\n\n$text";
}

# Stylesheets

my $embedImages = $embed? 1: 0;
my @styleSheets = qw/blog-style.css blog-highlight.css/;
for my $styleSheet (@styleSheets) {
    $styleSheet = "$cssDir/$styleSheet";
    if ($embed) {
        $styleSheet = "inline:$styleSheet";
    }
}    
my $styleSheets = join ' ',@styleSheets;

# Dokument generieren

my $year = POSIX::strftime('%Y',localtime);
my $date = POSIX::strftime('%Y-%m-%d',localtime);
my $mtime = POSIX::strftime('%Y-%m-%d %H:%M:%S',localtime($maxMtime));

# ACHTUNG: \xc2\xa9 kann nicht durch (C) ersetzt werden!

$sdoc = <<"__EOT__";
%Document:
  title="Frank Seitz - Developer Logbuch"
  styleSheet="$styleSheets"
  embedImages=$embedImages
  generateAnchors=0
  utf8=1

Copyright (C) 2010-$year Frank Seitz, U{http://fseitz.de/}, Last update: $mtime

%TableOfContents:
  maxDepth=1

$sdoc

# eof
__EOT__

if ($format eq 'sdoc') {
    print Encode::decode('utf-8',$sdoc);
}
else {
    print Encode::decode('utf-8',
        Blog::Base::R1::Sdoc->new(\$sdoc,-utf8=>1)->dump('html'));
}

# eof
