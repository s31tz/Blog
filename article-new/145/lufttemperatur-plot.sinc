%Format:
@@HTML@@
<div id="dgr" class="diagramGroup">
  <table style="border: 1px dotted #b0b0b0; margin-top: 0.6em; background-color: #f8f8f8;" width="100%" cellspacing="0">
  <tr>
    <td id="dgr-d1" class="diagram" style="height: 280px;"></td>
  </tr>
  <tr>
    <td>
      <span style="margin-left: 0.5em">Rangeslider:</span><input type="checkbox" id="dgr-r1" class="rangeslider" style="vertical-align: middle" value="1" title="Toggle visibility of range slider" onclick="dgr.toggleRangeSliders('dgr',this)" /> | Shape: <select id="dgr-s1" onchange="var shape = $('#dgr-s1').val(); if (shape == 'Spline') { Plotly.restyle('dgr-d1',{ 'mode': 'lines', 'line.shape': 'spline', }); } else if (shape == 'Marker') { Plotly.restyle('dgr-d1',{ 'mode': 'markers', }); } else { Plotly.restyle('dgr-d1',{ 'mode': 'lines', 'line.shape': 'linear', }); }" title="Connect data points with straight lines, splines or show markers"><option value="Spline" selected="selected">Spline</option><option value="Linear">Linear</option><option value="Marker">Marker</option></select> | <button type="button" onclick="let plot = $('#dgr-d1'); Plotly.downloadImage(plot[0],{ format: 'png', width: plot.width(), height: plot.height(), filename: 'AirTemperature', });" title="Download plot graphic as PNG">Download as PNG</button>
    </td>
  </tr>
  </table>
  <table style="border: 1px dotted #b0b0b0; margin-top: 0.6em; background-color: #f8f8f8;" width="100%" cellspacing="0">
  <tr>
    <td id="dgr-d2" class="diagram" style="height: 280px;"></td>
  </tr>
  <tr>
    <td>
      <span style="margin-left: 0.5em">Rangeslider:</span><input type="checkbox" id="dgr-r2" class="rangeslider" style="vertical-align: middle" value="1" title="Toggle visibility of range slider" onclick="dgr.toggleRangeSliders('dgr',this)" /> | Shape: <select id="dgr-s2" onchange="var shape = $('#dgr-s2').val(); if (shape == 'Spline') { Plotly.restyle('dgr-d2',{ 'mode': 'lines', 'line.shape': 'spline', }); } else if (shape == 'Marker') { Plotly.restyle('dgr-d2',{ 'mode': 'markers', }); } else { Plotly.restyle('dgr-d2',{ 'mode': 'lines', 'line.shape': 'linear', }); }" title="Connect data points with straight lines, splines or show markers"><option value="Spline" selected="selected">Spline</option><option value="Linear">Linear</option><option value="Marker">Marker</option></select> | <button type="button" onclick="let plot = $('#dgr-d2'); Plotly.downloadImage(plot[0],{ format: 'png', width: plot.width(), height: plot.height(), filename: 'WindSpeed', });" title="Download plot graphic as PNG">Download as PNG</button>
    </td>
  </tr>
  </table>
  <table style="border: 1px dotted #b0b0b0; margin-top: 0.6em; background-color: #f8f8f8;" width="100%" cellspacing="0">
  <tr>
    <td id="dgr-d3" class="diagram" style="height: 280px;"></td>
  </tr>
  <tr>
    <td>
      <span style="margin-left: 0.5em">Rangeslider:</span><input type="checkbox" id="dgr-r3" class="rangeslider" style="vertical-align: middle" value="1" title="Toggle visibility of range slider" onclick="dgr.toggleRangeSliders('dgr',this)" /> | Shape: <select id="dgr-s3" onchange="var shape = $('#dgr-s3').val(); if (shape == 'Spline') { Plotly.restyle('dgr-d3',{ 'mode': 'lines', 'line.shape': 'spline', }); } else if (shape == 'Marker') { Plotly.restyle('dgr-d3',{ 'mode': 'markers', }); } else { Plotly.restyle('dgr-d3',{ 'mode': 'lines', 'line.shape': 'linear', }); }" title="Connect data points with straight lines, splines or show markers"><option value="Spline" selected="selected">Spline</option><option value="Linear">Linear</option><option value="Marker">Marker</option></select> | <button type="button" onclick="let plot = $('#dgr-d3'); Plotly.downloadImage(plot[0],{ format: 'png', width: plot.width(), height: plot.height(), filename: 'AirPressure', });" title="Download plot graphic as PNG">Download as PNG</button>
    </td>
  </tr>
  </table>
  <table style="border: 1px dotted #b0b0b0; margin-top: 0.6em; background-color: #f8f8f8;" width="100%" cellspacing="0">
  <tr>
    <td id="dgr-d4" class="diagram" style="height: 280px;"></td>
  </tr>
  <tr>
    <td>
      <span style="margin-left: 0.5em">Rangeslider:</span><input type="checkbox" id="dgr-r4" class="rangeslider" style="vertical-align: middle" value="1" title="Toggle visibility of range slider" onclick="dgr.toggleRangeSliders('dgr',this)" /> | Shape: <select id="dgr-s4" onchange="var shape = $('#dgr-s4').val(); if (shape == 'Spline') { Plotly.restyle('dgr-d4',{ 'mode': 'lines', 'line.shape': 'spline', }); } else if (shape == 'Marker') { Plotly.restyle('dgr-d4',{ 'mode': 'markers', }); } else { Plotly.restyle('dgr-d4',{ 'mode': 'lines', 'line.shape': 'linear', }); }" title="Connect data points with straight lines, splines or show markers"><option value="Spline" selected="selected">Spline</option><option value="Linear">Linear</option><option value="Marker">Marker</option></select> | <button type="button" onclick="let plot = $('#dgr-d4'); Plotly.downloadImage(plot[0],{ format: 'png', width: plot.width(), height: plot.height(), filename: 'RelativeHumidity', });" title="Download plot graphic as PNG">Download as PNG</button>
    </td>
  </tr>
  </table>
  <table style="border: 1px dotted #b0b0b0; margin-top: 0.6em; background-color: #f8f8f8;" width="100%" cellspacing="0">
  <tr>
    <td id="dgr-d5" class="diagram" style="height: 280px;"></td>
  </tr>
  <tr>
    <td>
      <span style="margin-left: 0.5em">Rangeslider:</span><input type="checkbox" id="dgr-r5" class="rangeslider" style="vertical-align: middle" value="1" title="Toggle visibility of range slider" onclick="dgr.toggleRangeSliders('dgr',this)" /> | Shape: <select id="dgr-s5" onchange="var shape = $('#dgr-s5').val(); if (shape == 'Spline') { Plotly.restyle('dgr-d5',{ 'mode': 'lines', 'line.shape': 'spline', }); } else if (shape == 'Marker') { Plotly.restyle('dgr-d5',{ 'mode': 'markers', }); } else { Plotly.restyle('dgr-d5',{ 'mode': 'lines', 'line.shape': 'linear', }); }" title="Connect data points with straight lines, splines or show markers"><option value="Spline" selected="selected">Spline</option><option value="Linear">Linear</option><option value="Marker">Marker</option></select> | <button type="button" onclick="let plot = $('#dgr-d5'); Plotly.downloadImage(plot[0],{ format: 'png', width: plot.width(), height: plot.height(), filename: 'GlobalRadiation', });" title="Download plot graphic as PNG">Download as PNG</button>
    </td>
  </tr>
  </table>
</div>
<script type="text/javascript">
  // <![CDATA[
  var dgr = (function() {
    let trace = {
      type: 'scatter',
      mode: 'lines',
      fill: 'tozeroy',
      fillcolor: '#e0e0e0',
      line: {
        width: 1,
        color: '#ff0000',
        shape: 'spline',
      },
      marker: {
        size: 3,
        color: '#ff0000',
        symbol: 'circle',
      },
      x: [],
      y: [],
    };
    let layout = {
      plot_bgcolor: '#ffffff',
      paper_bgcolor: '#f8f8f8',
      title: {
        font: {
          color: '#ff0000',
        },
        yref: 'container',
        yanchor: 'top',
        y: 0.946428571428571,
      },
      spikedistance: -1,
      height: 280,
      margin: {
        t: 45,
        b: 96,
        autoexpand: false,
      },
      xaxis: {
        type: 'date',
        fixedrange: false,
        mirror: true,
        linecolor: '#d0d0d0',
        gridcolor: '#e8e8e8',
        hoverformat: '%Y-%m-%d %H:%M:%S',
        ticklen: 5,
        tickcolor: '#d0d0d0',
        showspikes: true,
        spikethickness: 1,
        spikesnap: 'data',
        spikecolor: '#000000',
        spikedash: 'dot',
        rangeslider: {
          autorange: true,
          bordercolor: '#e0e0e0',
          borderwidth: 1,
          thickness: 0.2,
          visible: true,
        },
        zeroline: true,
        zerolinecolor: '#d0d0d0',
      },
      yaxis: {
        type: 'linear',
        fixedrange: true,
        automargin: true,
        mirror: true,
        linecolor: '#d0d0d0',
        range: [-1,1],
        ticklen: 4,
        tickcolor: '#d0d0d0',
        gridcolor: '#e8e8e8',
        showspikes: true,
        side: 'left',
        spikethickness: 1,
        spikesnap: 'data',
        spikecolor: '#000000',
        spikedash: 'dot',
        title: {
          font: {
            color: '#ff0000',
          },
        },
        zeroline: true,
        zerolinecolor: '#d0d0d0',
      },
    };
    let config = {
      displayModeBar: false,
      doubleClickDelay: 1000,
      responsive: true,
    };
    let vars = {
      height: [280,239],
      bottomMargin: [96,55],
      titleY: [0.946428571428571,0.937238493723849],
      strict: false,
    };
    let setRangeSlider = function (groupId,i,bool) {
      let dId = groupId+'-d'+i;
      if (bool) {
        Plotly.relayout(dId,{
          'xaxis.rangeslider.visible': true,
          'xaxis.fixedrange': false,
          'height': vars.height[0],
          'margin.b': vars.bottomMargin[0],
          'title.y': vars.titleY[0],
        });
        $('#'+dId).height(vars.height[0]);
      }
      else {
        Plotly.relayout(dId,{
          'xaxis.rangeslider.visible': false,
          'xaxis.fixedrange': true,
          'height': vars.height[1],
          'margin.b': vars.bottomMargin[1],
          'title.y': vars.titleY[1],
        });
        $('#'+dId).height(vars.height[1]);
      }
      let cbId = groupId+'-r'+i;
      $('#'+cbId).prop('checked',bool);
      let div = $('#'+dId)[0];
      if (bool) {
        div.on('plotly_relayout',function(ed) {
          $('#'+groupId+' '+'.diagram').each(function(j) {
            if (j+1 != i && ed['height'] === undefined) {
              Plotly.relayout(this,ed);
            }
          });
        });
      }
    };
    let toggleRangeSliders = function (groupId,e) {
      $('#'+groupId+' .diagram').each(function(i) {
        this.removeAllListeners('plotly_relayout');
      });
      $('#'+groupId+' .rangeslider').each(function(i) {
        i++;
        let state = this == e? this.checked: false;
        setRangeSlider(groupId,i,state);
      });
    };
    let setTrace = function (name,i,trace,layout,x,y,z) {
      trace.x = x;
      trace.y = y;
      if (z.length) {
        trace.marker.color = z;
      }
      if (!x.length) {
        layout.annotations = [{
          text: 'No data found',
          xref: 'paper',
          yref: 'paper',
          showarrow: false,
          font: {
            size: 28,
            color: '#a0a0a0',
          },
        }];
        setRangeSlider(name,i,false);
        $('#'+name+'-r'+i).prop('disabled',true);
        $('#'+name+'-s'+i).prop('disabled',true);
      }
      let dId = name+'-d'+i;
      Plotly.deleteTraces(dId,0);
      Plotly.addTraces(dId,trace);
      return;
    };
    let loadDataSetTrace = function (name,i,trace,layout,url) {
      console.log(url);
      $.ajax({
        type: 'GET',
        url: url,
        async: true,
        beforeSend: function () {
          $('body').css('cursor','wait');
        },
        complete: function () {
          $('body').css('cursor','default');
        },
        error: function () {
          let msg = 'ERROR: Ajax request failed: '+url;
          if (vars.strict)
            alert(msg);
          else
            console.log(msg);
        },
        success: function (data,textStatus,jqXHR) {
          let x = [];
          let y = [];
          let z = [];
          let rows = data.split('\n');
          for (let i = 0; i < rows.length-1; i++) {
            let arr = rows[i].split('\t');
            x.push(arr[0]);
            y.push(parseFloat(arr[1]));
            if (arr.length > 2)
              z.push(arr[2]);
          }
          setTrace(name,i,trace,layout,x,y,z);
        },
      });
    };
    let generatePlot = function (name,i,title,yTitle,color,xMin,xMax,yMin,yMax,showRangeSlider,url,x,y,z) {
      let t = $.extend(true,{},trace);
      t.line.color = color;
      t.marker.color = color;
      let l = $.extend(true,{},layout);
      l.title.text = title;
      l.title.font.color = color;
      l.xaxis.range = [xMin,xMax];
      l.yaxis.title.text = yTitle;
      l.yaxis.title.font.color = color;
      l.yaxis.range = [yMin,yMax];
      let dId = name+'-d'+i;
      Plotly.newPlot(dId,[t],l,config).then(
        function() {
          if (url)
            loadDataSetTrace(name,i,t,l,url);
          else
            setTrace(name,i,t,l,x,y,z);
        },
        function() {
          alert('ERROR: plot creation failed: '+title);
        }
      );
      setRangeSlider(name,i,showRangeSlider);
    };
    return {
      generatePlot: generatePlot,
      setRangeSlider: setRangeSlider,
      toggleRangeSliders: toggleRangeSliders,
    };
  })();
  $(function() {
    dgr.generatePlot('dgr',1,'AirTemperature','°C','#ff0000','2009-02-19 00:00:00','2009-02-24 00:00:00',-1.9,7.1,true,'http://s31tz.de/timeseries?name=AirTemperature');
    dgr.generatePlot('dgr',2,'WindSpeed','m/s','#006400','2009-02-19 00:00:00','2009-02-24 00:00:00',0,5.7,false,'http://s31tz.de/timeseries?name=WindSpeed');
    dgr.generatePlot('dgr',3,'AirPressure','hPa','#000080','2009-02-19 00:00:00','2009-02-24 00:00:00',1009.4,1028.4,false,'http://s31tz.de/timeseries?name=AirPressure');
    dgr.generatePlot('dgr',4,'RelativeHumidity','%','#ee9a00','2009-02-19 00:00:00','2009-02-24 00:00:00',63,100,false,'http://s31tz.de/timeseries?name=RelativeHumidity');
    dgr.generatePlot('dgr',5,'GlobalRadiation','Watt','#8b008b','2009-02-19 00:00:00','2009-02-24 00:00:00',0,1000,false,'http://s31tz.de/timeseries?name=GlobalRadiation');
  });
  // ]]>
</script>
@@LaTeX@@
.

