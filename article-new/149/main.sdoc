# Date: 2020-11-21
# Id: 162
# Categories: Python, Perl

%Document:
  title="PyPerler: Perl-Klassen unter Python nutzen"
  generateAnchors=0
  utf8=1

%Figure: file="IMGDIR/python-perl-370x65.png" width="268" height="47"
  url="https://github.com/tkluck/pyperler"

U{PyPerler} ist ein Python-Package mit dem es möglich ist, Perl-Code
unter Python zu nutzen. Es wird vom Autor nach eigener Aussage zur
Zeit nicht gepflegt, funktioniert aber recht gut (Einschränkungen
siehe unten). Es lassen sich damit sogar komplexe Perl-Klassen unter
Python verwenden, wie z.B. ein O/R-Mapper für Datenbank-Operationen. Ich
experimentiere zur Zeit damit unter Debian 10 mit Python 3.7.3 und
Perl 5.28.1.

= Installation

Wir setzen zunächt eine virtuelle Umgebung auf, in die wir PyPerler
installieren wollen:

  $ virtualenv venv
  $ . venv/bin/activate

Wir holen den Sourcecode von GitHub:

  $ git clone https://github.com/tkluck/pyperler.git

Wir kompilieren den Code und installieren PyPerler in die virtuelle Umgebung:

  $ cd pyperler
  $ make
  $ make install

= Probleme

== Operatoren sind nicht vollständig überladen

Die Operator-Methoden C{__radd__()}, C{__rmul__()} usw. fehlen in Klasse
C{ScalarValue}, so dass unter o.g. Python-Version ein Perl-Skalar ohne
explizite Typwandlung nur linksseitig mit einem Python-Objekt
verknüpft werden kann, aber nicht rechtsseitig. Diese Definitionen
lassen sich relativ einfach nachtragen. Als Leitfaden kann

  $ make check

genutzt werden, das die entsprechenden Defizite aufzeigt.

== Die Extension ist nicht thread-save

Pyperler ist offenbar nicht tread-save. Eine Flask-Anwendung muss mit

  $ flask run --without-threads

gestartet werden, sonst stürzt sie mit einem Segmentation Fault beim
ersten Zugriff auf ein Perl-Objekt ab. Dies hat möglicherweise mit
einer unzureichenden Nutzung von Pythons I{Global Interpreter Lock} (GIL)
zu tun.

= Links

* U{PyPerler}

%Link:
  name="PyPerler"
  url=https://github.com/tkluck/pyperler
